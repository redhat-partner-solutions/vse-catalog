---
apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  notifications:
    enabled: true
  applicationSet:
    resources:
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: "16"
        memory: 32Gi
      requests:
        cpu: 1
        memory: 2Gi
    sharding: {}
  kustomizeBuildOptions: "--enable-alpha-plugins"
  repo:
    volumes:
      - name: kustomize
    initContainers:
      - resources: {}
        terminationMessagePath: "/dev/termination-log"
        name: kustomize-plugin
        command:
          - "/exportkustomize.sh"
        args:
          - "/.config"
        imagePullPolicy: Always
        volumeMounts:
          - name: kustomize
            mountPath: "/.config"
        terminationMessagePolicy: File
        image: quay.io/openshift-kni/ztp-site-generator:<patch-me>
    volumeMounts:
      - name: kustomize
        readOnly: false
        mountPath: "/.config"
    env:
      - name: ARGOCD_EXEC_TIMEOUT
        value: 360s
      - name: KUSTOMIZE_PLUGIN_HOME
        value: "/.config/kustomize/plugin"
    resources:
      limits:
        cpu: '8'
        memory: 16Gi
      requests:
        cpu: '1'
        memory: 2Gi
  # yamllint disable rule:line-length
  resourceHealthChecks:
    - group: bitnami.com
      kind: SealedSecret
      check: |
        hs = {}
        hs.status = "Healthy"
        hs.message = "Controller doesnt report status"
        return hs
    - group: internal.open-cluster-management.io
      kind: ManagedClusterInfo
      check: |
        hs = {}
        if obj.status ~= nil and obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.status == "True" and condition.reason == "ManagedClusterInfoSynced" then
              hs.status = "Healthy"
              hs.message = "Managed cluster is added to hub cluster"
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for managed cluster to be deployed."
        return hs
  resourceIgnoreDifferences:
    resourceIdentifiers:
      - group: route.openshift.io
        kind: Route
        customization:
          jsonPointers:
            - /spec/host
  # yamllint enable rule:line-length
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  sso:
    provider: dex
    dex:
      openShiftOAuth: true
